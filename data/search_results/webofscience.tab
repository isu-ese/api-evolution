other_id	PT	AU	BA	BE	GP	AF	BF	CA	TI	SO	SE	BS	LA	DT	CT	CY	CL	SP	HO	DE	ID	AB	C1	RP	EM	RI	OI	FU	FX	CR	NR	TC	Z9	U1	U2	PU	PI	PA	SN	EI	BN	J9	JI	PD	PY	VL	IS	PN	SU	SI	MA	BP	EP	AR	DI	D2	EA	EY	PG	WC	SC	GA	UT	PM	OA	HC	HP	DA
wos_acm_01	B	Stocker, M; Zimmermann, O; Zdun, U; Lubke, D; Pautasso, C			Assoc Comp Machinery	Stocker, Mirko; Zimmermann, Olaf; Zdun, Uwe; Luebke, Daniel; Pautasso, Cesare			Interface Quality Patterns - Communicating and Improving the Quality of Microservices APIs	EUROPLOP 2018: PROCEEDINGS OF THE 23RD EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS					23rd European Conference on Pattern Languages of Programs (EuroPLoP)	JUL 04-08, 2018	Irsee, GERMANY	OReilly, DPunkt, Hillside Europe e V				The design and evolution of Application Programming Interfaces (APIs) in microservices architectures is challenging. General design issues in integration and programming have been covered in great detail in many pattern languages since the beginnings of the patterns movement, and service-oriented infrastructure design patterns have also been published in the last decade. However, the interface representations (i.e., the content of message payloads) have received less attention. We presented five structural representation patterns in our previous work; in this paper we continue our coverage of the API design space and propose five interface quality patterns that deal with the observable aspects of quality-attribute-driven interface design for efficiency, security, and manageability: An API Key allows API providers to identify clients. Providers may offer rich data contracts in their responses, which not all consumers might need. A Wish List allows the client to request only the attributes in a response data set that it is interested in. If a client makes many API calls, the provider can employ a Rate Limit and bill clients according to a specified Rate Plan. A provider has to provide a high-quality service while at the same time having to use its available resources economically. The resulting compromise is expressed in a provider's Service Level Agreement.																			978-1-4503-6387-7				2018										10.1145/3282308.3282319								WOS:000471044700010					
wos_acm_02	B	Murphy-Hill, E; Sadowski, C; Head, A; Daughtry, J; Macvean, A; Jaspan, C; Winter, C			IEEE	Murphy-Hill, Emerson; Sadowski, Caitlin; Head, Andrew; Daughtry, John; Macvean, Andrew; Jaspan, Ciera; Winter, Collin			Discovering API Usability Problems at Scale	2018 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON API USAGE AND EVOLUTION (WAPI)					2nd ACM/IEEE International Workshop on API Usage and Evolution (WAPI)	JUN 02, 2018	Gothenburg, SWEDEN	Assoc Comp Machinery, IEEE Comp Soc, SIGSOFT, IEEE Tech Council Software Engn				Software developers' productivity can be negatively impacted by using APIs incorrectly. In this paper, we describe an analysis technique we designed to find API usability problems by comparing successive file-level changes made by individual software developers. We applied our tool, StopMotion, to the file histories of real developers doing real tasks at Google. The results reveal several API usability challenges including simple typos, conceptual API misalignments, and conflation of similar APIs.																							2018							14	17		10.1145/3194793.3194795								WOS:000454988300005					
wos_ieee_03	S	Kwon, H; Ahn, J; Choi, S; Siewierski, J; Kosko, P; Szydelko, P			IEEE	Kwon, Hobum; Ahn, Juwon; Choi, Sunggyu; Siewierski, Jakub; Kosko, Piotr; Szydelko, Piotr			An experience report of the API evolution and maintenance for software platforms	PROCEEDINGS 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME)	Proceedings-IEEE International Conference on Software Maintenance				IEEE International Conference on Software Maintenance and Evolution (ICSME)	SEP 23-29, 2018	Madrid, SPAIN	IEEE, IEEE Comp Soc				Development and maintenance of software platform APIs are challenging because new APIs are constantly added in new software platforms. Furthermore, software platform API development requires a lot of stakeholders to work together on tight release schedules. Application developers use platform's APIs to create their applications and therefore providing a well-defined and comprehensive set of platform APIs may be the most basic requirement for software platforms. To provide such APIs, API usability should be secured and API backward compatibility should be guaranteed in subsequent platform releases. In these circumstances, sharing lessons learned from multiple years of experience of platform API development, maintenance, and releases using an integrated API development process can benefit API researchers and practitioners who have similar needs to create or adopt API development process for their projects. In this paper we share an API development and maintenance process for multi-device Tizen software platform, which we call the Tizen API Change Request (ACR) process. The process has been used among various Tizen API stakeholders for several years of Tizen platform and SDK releases to keep API usability and compatibility high. We believe the process can be further applied to various software platforms and projects to systematically develop and maintain their APIs.																	1063-6773		978-1-5386-7870-1				2018							587	590		10.1109/ICSME.2018.00034								WOS:000451376200059					
wos_springer_04	J	Lopez-Fernandez, L; Garcia, B; Gallego, M; Gortazar, F				Lopez-Fernandez, Luis; Garcia, Boni; Gallego, Micael; Gortazar, Francisco			Designing and evaluating the usability of an API for real-time multimedia services in the Internet	MULTIMEDIA TOOLS AND APPLICATIONS												In the last few years, multimedia technologies in general, and Real-Time multimedia Communications (RTC) in particular, are becoming mainstream among WWW and smartphone developers, who have an increasing interest in richer media capabilities for creating their applications. The engineering literature proposing novel algorithms, protocols and architectures for managing and processing multimedia information is currently overwhelming. However, most of these results do not arrive to applications due to the lack of simple and usable APIs. Interestingly, in this context in which APIs are the critical ingredient for reaching wide developer audiences, the scientific literature about multimedia APIs and their usability is scarce. In this paper we try to contribute to fill this gap by proposing the RTC Media API: a novel type of API designed with the aim of making simple for developers the use of latest trends in RTC multimedia including WebRTC, Video Content Analysis or Augmented Reality. We provide a specification of such API and discuss how it satisfies a set of design requirements including programming-language agnosticism, adaptation to cloud environments, support to multisensory multimedia, etc. After that, we describe an implementation of such an API that has been created in the context of the Kurento open source software project, and present a study evaluating the API usability performed in a group of more than 40 professional developers distributed worldwide. In the light of the obtained results, we conclude that the usability of the API is adequate across the main development activities (i.e. API learning, code creation and code maintenance), with an average usability score of 3.39 over 5 in a Likert scale, and that this result is robust with respect to developers' profiles, cultures, professional experiences and preferred programming languages.				Gortazar, Francisco/H-8219-2015	Gortazar, Francisco/0000-0002-2183-0869												1380-7501	1573-7721				JUN	2017	76	12					14247	14304		10.1007/s11042-016-3729-z								WOS:000402732800027					
