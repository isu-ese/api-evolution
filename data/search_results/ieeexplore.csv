other_id,Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication_Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Ieee_01,API Usage in Descriptions of Source Code Functionality,P. Rodeghero; C. McMillan; A. Shirey,NA; NA; NA,2017 IEEE/ACM 1st International Workshop on API Usage and Evolution (WAPI),,2017,,,3,6,"In this paper, we present a study exploring the use of API keywords within method summaries. We conducted a web-based study where we asked participants to rank Java method summaries based on five levels of detail, from low level to high level. We found that programmers widely use API in both high and low level summaries. Specifically, we found that 76.78% of higher level summaries contain Java API keywords. Additionally, we found that 93.75% of lower level summaries also contain them. This also shows that, in general, as the detail level decreases, the number of API keywords within the summary increases. It is our hope that this line of research will spark a discussion about API usage outside of source code. It is possible that method summaries are not the only form of documentation that API usage plays an important role. We believe these may be important results that could lead to an improvement for API usability design.",,978-1-5386-2805-8978-1-5386-2806,10.1109/WAPI.2017.3,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=7965484,Source code summaries;API usage;Levels of detail,Java;Documentation;Tools;Conferences;Usability,application program interfaces;Internet;Java;source code (software),source code functionality;Web-based study;Java method summaries;low level summaries;high level summaries;Java API keywords;API usage;API usability design,,,21,,,,,IEEE,IEEE Conferences
Ieee_02,An Experience Report of the API Evolution and Maintenance for Software Platforms,H. Kwon; J. Ahn; S. Choi; J. Siewierski; P. Kosko; P. Szydelko,NA; NA; NA; NA; NA; NA,2018 IEEE International Conference on Software Maintenance and Evolution (ICSME),,2018,,,587,590,"Development and maintenance of software plat-form APIs are challenging because new APIs are constantly added in new software platforms. Furthermore, software plat-form API development requires a lot of stakeholders to work together on tight release schedules. Application developers use platform's APIs to create their applications and therefore providing a well-defined and comprehensive set of platform APIs may be the most basic requirement for software platforms. To provide such APIs, API usability should be secured and API backward compatibility should be guaranteed in subsequent platform re-leases. In these circumstances, sharing lessons learned from multiple years of experience of platform API development, mainte-nance, and releases using an integrated API development process can benefit API researchers and practitioners who have similar needs to create or adopt API development process for their projects. In this paper we share an API development and mainte-nance process for multi-device Tizen software platform, which we call the Tizen API Change Request (ACR) process. The process has been used among various Tizen API stakeholders for several years of Tizen platform and SDK releases to keep API usability and compatibility high. We believe the process can be further applied to various software platforms and projects to systematically develop and maintain their APIs.",2576-3148;1063-6773,978-1-5386-7870-1978-1-5386-7871,10.1109/ICSME.2018.00034,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=8530070,API development;API maintenance;software platform APIs;API review;multi-device APIs,Stakeholders;Tools;Usability;Security;Maintenance engineering;Electronic mail,application program interfaces;software maintenance,API evolution;application developers;platform APIs;API usability;API backward compatibility;platform API development;integrated API development process;API researchers;multidevice Tizen software platform;Tizen API stakeholders;Tizen API change request process;subsequent platform releases;software platform API development,,,22,,,,,IEEE,IEEE Conferences
Ieee_03,Context-Sensitive Code Completion Tool for Better API Usability,M. Asaduzzaman; C. K. Roy; K. A. Schneider; D. Hou,NA; NA; NA; NA,2014 IEEE International Conference on Software Maintenance and Evolution,,2014,,,621,624,"Developers depend on APIs of frameworks and libraries to support the development process. Due to the large number of existing APIs, it is difficult to learn, remember, and use them during the development of a software. To mitigate the problem, modern integrated development environments provide code completion facilities that free developers from remembering every detail. In this paper, we introduce CSCC, a simple, efficient context-sensitive code completion tool that leverages previous code examples to support method completion. Compared to other existing code completion tools, CSCC uses new sources of contextual information together with lightweight source code analysis to better recommend API method calls.",1063-6773,978-1-4799-6146,10.1109/ICSME.2014.110,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=6976154,API methods;Code Completion;Eclipse plugin,Context;Proposals;Java;Context modeling;Receivers;Libraries;Databases,application program interfaces;source code (software),context-sensitive code completion tool;API usability;CSCC;lightweight source code analysis,,2,12,,,,,IEEE,IEEE Conferences
Ieee_04,On the Role of Fitness Dimensions in API Design Assessment - An Empirical Investigation,A. Zghidi; I. Hammouda; B. Hnich; E. Knauss,NA; NA; NA; NA,2017 IEEE/ACM 1st International Workshop on API Usage and Evolution (WAPI),,2017,,,19,22,"In this paper we present a case study of applying fitness dimensions in API design assessment. We argue that API assessment is company specific and should take into consideration various stakeholders in the API ecosystem. We identified new fitness dimensions and introduced the notion of design considerations for fitness dimensions such as priorities, tradeoffs, and technical versus cognitive classification.",,978-1-5386-2805-8978-1-5386-2806,10.1109/WAPI.2017.4,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=7965488,API design;API assessment,Companies;Stakeholders;Testing;Conferences;Usability;Security,application program interfaces,fitness dimensions;API design assessment;API ecosystem;design considerations;application programming interfaces,,,8,,,,,IEEE,IEEE Conferences
Ieee_05,Automatic evaluation of API usability using complexity metrics and visualizations,C. R. B. de Souza; D. L. M. Bentolila,"Faculdade de Computação - Universidade Federal do Pará, Brazil; Faculdade de Computação - Universidade Federal do Pará, Brazil",2009 31st International Conference on Software Engineering - Companion Volume,,2009,,,299,302,"APIs are one of the most important concepts in today's modern software engineering. They allow software developers to work independently and minimize the impact caused by changes in the implementation of software services. Despite their importance, currently there are only a few approaches that guide the design of an API. In this paper, we present an approach, and associated tool, that allows an API client (developer) to evaluate the usability of an API and decide whether to use it (release it). In this aspect, our approach goes beyond previous approaches by performing this complexity and usability API analysis automatically.",,978-1-4244-3495,10.1109/ICSE-COMPANION.2009.5071006,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=5071006,,Usability;Software engineering;Packaging;Guidelines;Computer languages;Programming;Java;Data visualization;Performance analysis;Inspection,application program interfaces;software engineering;software metrics;software performance evaluation,automatic evaluation;API usability;complexity metrics;software engineering;visualizations,,12,23,,,,,IEEE,IEEE Conferences
Ieee_06,A Quality Model and Its Quantitative Evaluation Method for Web APIs,R. Yamamoto; K. Ohashi; M. Fukuyori; K. Kimura; A. Sekiguchi; R. Umekawa; T. Uehara; M. Aoyama,NA; NA; NA; NA; NA; NA; NA; NA,2018 25th Asia-Pacific Software Engineering Conference (APSEC),,2018,,,598,607,"As Representational State Transfer (REST)-based Web APIs are spreading to enterprise information systems, software development for the use and provision of Web APIs is rapidly increasing. The quality of the Web APIs significantly influences the application quality and development productivity. However, no quality model for Web APIs has been established yet, because Web APIs differ from conventional APIs in that they execute remotely on different servers and may be changed independently of their users. These unique characteristics introduce new problems in the software engineering of Web APIs, and impose risks to the users, especially those using enterprise Web APIs, whose numbers are increasing. To solve these problems, in this paper, we propose a quality model for Web APIs that reflects their unique characteristics. As the main characteristics of this quality model, we propose the concept of Web API learnability to use and stability to change, from the perspective of Web API users. Based on this quality model, we also propose a set of measures and a quantitative evaluation method. In this study, we applied the proposed quality model and evaluation method to four types of actual Web APIs, including Uber, WordPress, OpenStack, and Media Processing. To validate the proposed model, we also conducted an empirical study of the usability of the Web APIs. Our comparison of the proposed quality statistics with those from the empirical study validates the effectiveness of the proposed quality model and its associated measures of the learnability and stability of Web APIs.",2640-0715;1530-1362,978-1-7281-1970-0978-1-7281-1971,10.1109/APSEC.2018.00075,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=8719481,"Web API, REST, Quality model, Quality characteristics, API document, learnability, stability",Usability;Information systems;Productivity;Stakeholders;Stability analysis;ISO Standards,application program interfaces;cloud computing;information systems;software engineering;statistical analysis;Web services,quality model;enterprise Web APIs;Web API learnability;Web API users;representational state transfer-based Web API;REST;Uber;WordPress;OpenStack;media processing;quality statistics,,,33,,,,,IEEE,IEEE Conferences
Ieee_07,Classifying stack overflow posts on API issues,M. Ahasanuzzaman; M. Asaduzzaman; C. K. Roy; K. A. Schneider,"Queen's University, Canada; University of Saskatchewan, Canada; University of Saskatchewan, Canada; University of Saskatchewan, Canada","2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)",,2018,,,244,254,"The design and maintenance of APIs are complex tasks due to the constantly changing requirements of its users. Despite the efforts of its designers, APIs may suffer from a number of issues (such as incomplete or erroneous documentation, poor performance, and backward incompatibility). To maintain a healthy client base, API designers must learn these issues to fix them. Question answering sites, such as Stack Overflow (SO), has become a popular place for discussing API issues. These posts about API issues are invaluable to API designers, not only because they can help to learn more about the problem but also because they can facilitate learning the requirements of API users. However, the unstructured nature of posts and the abundance of non-issue posts make the task of detecting SO posts concerning API issues difficult and challenging. In this paper, we first develop a supervised learning approach using a Conditional Random Field (CRF), a statistical modeling method, to identify API issue-related sentences. We use the above information together with different features of posts and experience of users to build a technique, called CAPS, that can classify SO posts concerning API issues. Evaluation of CAPS using carefully curated SO posts on three popular API types reveals that the technique outperforms all three baseline approaches we consider in this study. We also conduct studies to test the generalizability of CAPS results and to understand the effects of different sources of information on it.",,978-1-5386-4969-5978-1-5386-4970,10.1109/SANER.2018.8330213,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=8330213,API Issue;unstructured data mining;text classification;feature extraction;Stack Overflow,Androids;Humanoid robots;Task analysis;Documentation;Usability;Knowledge discovery;Supervised learning,application program interfaces;data mining;learning (artificial intelligence);pattern classification;question answering (information retrieval);text analysis;word processing,API designers;API issue-related sentences;API types;stack overflow post classification;API maintenance;question answering sites;supervised learning;Conditional Random Field;statistical modeling;CAPS;unstructured data mining;text classification,,,36,,,,,IEEE,IEEE Conferences
Ieee_08,Temporal analysis of API usage concepts,G. Uddin; B. Dagenais; M. P. Robillard,"School of Computer Science, McGill University, Montréal, QC, Canada; School of Computer Science, McGill University, Montréal, QC, Canada; School of Computer Science, McGill University, Montréal, QC, Canada",2012 34th International Conference on Software Engineering (ICSE),,2012,,,804,814,"Software reuse through Application Programming Interfaces (APIs) is an integral part of software development. The functionality offered by an API is not always accessed uniformly throughout the lifetime of a client program. We propose Temporal API Usage Pattern Mining to detect API usage patterns in terms of their time of introduction into client programs. We detect concepts as distinct groups of API functionality from the change history of a client program. We locate those concepts in the client change history and detect temporal usage patterns, where a pattern contains a set of concepts that were added into the client program in a specific temporal order. We investigated the properties of temporal API usage patterns through a multiple-case study of three APIs and their use in up to 19 client software projects. Our technique was able to detect a number of valuable patterns in two out of three of the APIs investigated. Further investigation showed some patterns to be relatively consistent between clients, produced by multiple developers, and not trivially derivable from program structure or API documentation.",1558-1225;0270-5257;0270-5257,978-1-4673-1067-3978-1-4673-1066-6978-1-4673-1065,10.1109/ICSE.2012.6227138,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=6227138,API Usage;API Usability;Usage Pattern;Software Reuse;Mining Software Repositories,History;Data mining;Joining processes;Principal component analysis;Availability;Application programming interfaces;Documentation,application program interfaces;data mining;software reusability,temporal analysis;API usage concepts;software reuse;application programming interfaces;software development;temporal API usage pattern mining;API usage pattern detection;client program;client change history,,12,24,,,,,IEEE,IEEE Conferences
Ieee_09,Analyzing temporal API usage patterns,G. Uddin; B. Dagenais; M. P. Robillard,"School of Computer Science, McGill University, Montréal, QC Canada; School of Computer Science, McGill University, Montréal, QC Canada; School of Computer Science, McGill University, Montréal, QC Canada",2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011),,2011,,,456,459,"Software reuse through Application Programming Interfaces (APIs) is an integral part of software development. As developers write client programs, their understanding and usage of APIs change over time. Can we learn from long-term changes in how developers work with APIs in the lifetime of a client program? We propose Temporal API Usage Mining to detect significant changes in API usage. We describe a framework to extract detailed models representing addition and removal of calls to API methods over the change history of a client program. We apply machine learning technique to these models to semi-automatically infer temporal API usage patterns, i.e., coherent addition of API calls at different phases in the life-cycle of the client program.",1938-4300,978-1-4577-1639-3978-1-4577-1638,10.1109/ASE.2011.6100098,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=6100098,API Usage;API Usability;Usage Pattern;Software Reuse;Mining Software Repositories,History;Data mining;Principal component analysis;Programming;Software;Documentation;Machine learning,application program interfaces;data mining;software reusability,temporal API usage patterns;software reuse;application programming interfaces;software development;temporal API usage mining;API calls;client program life cycle,,10,15,,,,,IEEE,IEEE Conferences
Ieee_10,Usability and Security Effects of Code Examples on Crypto APIs,K. Mindermann; S. Wagner,"ISTE, University of Stuttgart; ISTE, University of Stuttgart","2018 16th Annual Conference on Privacy, Security and Trust (PST)",,2018,,,1,2,"Context: Cryptographic APIs are said to be not usable and researchers suggest to add example code to the documentation. Aim: We wanted to create a free platform for cryptographic code examples that improves the usability and security of created applications by non security experts. Method: We created the open-source web platform CryptoExamples and conducted a controlled experiment where 58 students added symmetric encryption to a Java program. We then measured the usability and security. Results: The participants who used the platform were not only significantly more effective (+73 %) but also their code contained significantly less possible security vulnerabilities (-66 %). Conclusions: With CryptoExamples the gap between hard to change API documentation and the need for complete and secure code examples can be closed. Still, the platform needs more code examples.",,978-1-5386-7493-2978-1-5386-7494,10.1109/PST.2018.8514203,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=8514203,,Cryptography;Libraries;Usability;Documentation;Task analysis;Tools,application program interfaces;cryptography;Internet;Java;public domain software,nonsecurity experts;open-source web platform;cryptographic API;cryptoexample;symmetric encryption;Java program,,,7,,,,,IEEE,IEEE Conferences
Ieee_11,A Large-Scale Empirical Study on Linguistic Antipatterns Affecting APIs,E. Aghajani; C. Nagy; G. Bavota; M. Lanza,NA; NA; NA; NA,2018 IEEE International Conference on Software Maintenance and Evolution (ICSME),,2018,,,25,35,"The concept of monolithic stand-alone software systems developed completely from scratch has become obsolete, as modern systems nowadays leverage the abundant presence of Application Programming Interfaces (APIs) developed by third parties, which leads on the one hand to accelerated development, but on the other hand introduces potentially fragile dependencies on external resources. In this context, the design of any API strongly influences how developers write code utilizing it. A wrong design decision like a poorly chosen method name can lead to a steeper learning curve, due to misunderstandings, misuse and eventually bug-prone code in the client projects using the API. It is not unfrequent to find APIs with poorly expressive or misleading names, possibly lacking appropriate documentation. Such issues can manifest in what have been defined in the literature as Linguistic Antipatterns (LAs), i.e., inconsistencies among the naming, documentation, and implementation of a code entity. While previous studies showed the relevance of LAs for software developers, their impact on (developers of) client projects using APIs affected by LAs has not been investigated. This paper fills this gap by presenting a large-scale study conducted on 1.6k releases of popular Maven libraries, 14k open-source Java projects using these libraries, and 4.4k questions related to the investigated APIs asked on Stack Overflow. In particular, we investigate whether developers of client projects have higher chances of introducing bugs when using APIs affected by LAs and if these trigger more questions on Stack Overflow as compared to non-affected APIs.",2576-3148;1063-6773,978-1-5386-7870-1978-1-5386-7871,10.1109/ICSME.2018.00012,,https://ieeexplore-ieee-org.proxybz.lib.montana.edu:3443/stamp/stamp.jsp?arnumber=8529834,Empirical Study;Application Programming Interfaces (APIs);Linguistic Antipatterns,Documentation;Usability;Libraries;Tools;Linguistics;Computer bugs,application program interfaces;computational linguistics;Java;public domain software;software maintenance,API;client projects;linguistic antipatterns;LAs;software developers;application programming interfaces;naming;documentation;code entity;open-source Java projects,,1,50,,,,,IEEE,IEEE Conferences
